#include <SPI.h>

// PIN 8 LED
// PIN 7 serial clock
// PIN 6 MOSI 
// PIN 5 D/C data/command
// PIN 4 RST reset?
// PIN 3 Slave Select
// PIN 2 ground 
// PIN 1 voltage 3.3

#define OUT_RST 6
#define OUT_LED 2
#define OUT_DC 5
#define OUT_SCE 10 // 4, 10, 52

#define WIDTH 84
#define HEIGHT 48
#define BANKS 504
#define PIXELS 4032

byte pixelBuffer[BANKS]; 

void initialize() {
    Serial.begin(9600);
    pinMode(OUT_LED, OUTPUT);
    pinMode(OUT_RST, OUTPUT);
    pinMode(OUT_DC, OUTPUT);

    digitalWrite(OUT_LED, 0); // turn LED off

    resetDisplay();

    SPI.begin(OUT_SCE);
    SPI.setClockDivider(OUT_SCE, 84);
    delay(100); 

    commandMode();
    delay(100);
    sendByte(0x21); // FUNCTION SET
    sendByte(0x14); // SET BIAS
    sendByte(0b10110000); // SET CONTRAST
    sendByte(0x20); // FUNCTION SET
    sendByte(0x0C); // SET DISPLAY MODE
    dataMode();
    delay(100);
    digitalWrite(OUT_LED, HIGH);
}

void resetDisplay() {
    digitalWrite(OUT_RST, LOW);
    delay(500);
    digitalWrite(OUT_RST, HIGH);
}

void commandMode() {
    digitalWrite(OUT_DC, LOW);
}

void dataMode() {
    digitalWrite(OUT_DC, HIGH);
}

void setup()
{
    initialize();
}

int column = 0;
int row = 0;
bool add = 1;

void loop()
{
//    if (row > 5) {
//        row = 0;
//        clearDisplay();
//    } else {
//        for (int i = 0; i<8; i++){
//            setPixel(column, row*8+i, true);
//        }
//        ++column;
//        if (column > 83) {
//            column = 0;
//            ++row;
//        }
//    }

    if (column > 83) {
        column = 0;
        add = !add;
    } else {
        for (int i = 0; i<83; i++){
            if (add) {
                setPixel(column, i, true);
            } else {
                setPixel(column, i, false);
            }
        }
        ++column;
    }

    drawBuffer();
    delay(20);
}

void drawBuffer() {
    for(int i = 0; i < BANKS; ++i) {
        sendByte(pixelBuffer[i]);
    }    
}

void sendByte(byte data) {
    SPI.transfer(OUT_SCE, data);
}

void clearDisplay() {
    for(int i = 0; i < BANKS; ++i) {
        pixelBuffer[i] = 0x00;
    }
}

void makeBlack(){
    for(int i = 0; i < BANKS; ++i) {
        pixelBuffer[i] = 0xFF;
    }
}


void setPixel(int x, int y, bool value) {
    if(x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) return;

    int row = y / 8;
    int index = row * WIDTH + x;
    int bankIndex = y % 8;
    int bitmask = 1 << bankIndex;

    if(value) {
        pixelBuffer[index] |= bitmask;
    } else {
        pixelBuffer[index] &= ~bitmask;
    }
}

unsigned char font[95][6] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // space
    { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 }, // !
    { 0x00, 0x07, 0x00, 0x07, 0x00, 0x00 }, // "
    { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 }, // #
    { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 }, // $
    { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 }, // %
    { 0x36, 0x49, 0x55, 0x22, 0x50, 0x00 }, // &
    { 0x00, 0x00, 0x07, 0x00, 0x00, 0x00 }, // '
    { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 }, // (
    { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 }, // )
    { 0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00 }, // *
    { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 }, // +
    { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00 }, // ,
    { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, // -
    { 0x00, 0x60, 0x60, 0x00, 0x00, 0x00 }, // .
    { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, // slash
    { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 }, // 0
    { 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 }, // 1
    { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00 }, // 2
    { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 }, // 3
    { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 }, // 4
    { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 }, // 5
    { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 }, // 6
    { 0x03, 0x71, 0x09, 0x05, 0x03, 0x00 }, // 7
    { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 }, // 8
    { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 }, // 9
    { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 }, // :
    { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 }, // ;
    { 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 }, // <
    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 }, // =
    { 0x00, 0x41, 0x22, 0x14, 0x08, 0x00 }, // >
    { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 }, // ?
    { 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00 }, // @
    { 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 }, // A
    { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 }, // B
    { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 }, // C
    { 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // D
    { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 }, // E
    { 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00 }, // F
    { 0x3E, 0x41, 0x41, 0x49, 0x7A, 0x00 }, // G
    { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 }, // H
    { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 }, // I
    { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 }, // J
    { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 }, // K
    { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 }, // L
    { 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00 }, // M
    { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 }, // N
    { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // O
    { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 }, // P
    { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 }, // Q
    { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 }, // R
    { 0x26, 0x49, 0x49, 0x49, 0x32, 0x00 }, // S
    { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 }, // T
    { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 }, // U
    { 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 }, // V
    { 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00 }, // W
    { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 }, // X
    { 0x07, 0x08, 0x70, 0x08, 0x07, 0x00 }, // Y
    { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 }, // Z
    { 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00 }, // braces
    { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 }, // backslash
    { 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00 }, // closing braces
    { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 }, // ^
    { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 }, // _
    { 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 }, // `
    { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 }, // a
    { 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 }, // b
    { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 }, // c
    { 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 }, // d
    { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 }, // e
    { 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 }, // f
    { 0x08, 0x54, 0x54, 0x54, 0x3C, 0x00 }, // g
    { 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 }, // h
    { 0x00, 0x48, 0x7D, 0x40, 0x00, 0x00 }, // i
    { 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 }, // j
    { 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 }, // k
    { 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 }, // l
    { 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00 }, // m
    { 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 }, // n
    { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 }, // o
    { 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 }, // p
    { 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 }, // q
    { 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 }, // r
    { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 }, // s
    { 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 }, // t
    { 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 }, // u
    { 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 }, // v
    { 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 }, // w
    { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 }, // x
    { 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 }, // y
    { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }, // z
    { 0x00, 0x08, 0x36, 0x41, 0x00, 0x00 }, // curly braces
    { 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00 }, // |
    { 0x00, 0x41, 0x36, 0x08, 0x00, 0x00 }, // closing curly braces
    { 0x10, 0x08, 0x08, 0x10, 0x08, 0x00 } // ~
};
